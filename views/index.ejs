<!doctype html>
<html class="h-100" lang="ko">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="디깅, 홍대, 전시, 졸업, digging, art, show, rose">
  <meta name="author" content="김세현, 낭은영, 설경민, 정승원, 디깅">
  <meta name="generator" content="Jekyll v4.1.1">
  <meta property="og:title" content="원하는 정보를 내손안에, DIGGING">
  <meta property="og:description" content="UX UI 팀 디깅">
  <meta property="og:image" content="/images/s2/S2.png">
  <title>DIGGING</title>

  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link
    href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,700;0,800;0,900;1,200&family=Noto+Sans+KR:wght@100;400;700&display=swap"
    rel="stylesheet">

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css">

  <!-- <link rel="shortcut icon" type="image/x-icon" href="images/favicon-32x32.png"> -->
  <link rel="shortcut icon" href="images/favicon2.png">
  <link rel="apple-touch-icon-precomposed" href="images/favicon2.png">
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="images/favicon2.png">
  <link rel="image_src" href="images/favicon2.png">
  <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">

  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-8L0YF3JNQ2"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'G-8L0YF3JNQ2');
  </script>
  <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>

  <style>
    .fade {
      opacity: 1;
    }

    .s1_clicked {
      border: 1px solid rgba(255, 255, 255, 0.5) !important;
    }

    .container-img {
      position: relative;
      width: 100%;
      /* max-width: 400px; */
    }

    .image {
      display: block;
      width: 100%;
      height: auto;
    }

    .overlay {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      height: 100%;
      width: 100%;
      /* opacity: 0; */
    }




    .flip-card {
      background-color: transparent;
      width: 60%;
      height: 100%;
      perspective: 1000px;
    }

    .flip-card-inner {
      position: relative;
      text-align: center;
      transition: transform 1s;
      transform-style: preserve-3d;
    }

    .flip-card:hover .flip-card-inner {
      transform: rotateY(180deg);
    }

    .flip-card-front,
    .flip-card-back {
      /* width: 30%; */
      -ms-transform: rotate(30deg);
      /* IE 9 */
      transform: rotate(30deg);
      position: absolute;
      /* width: 155%; */
      /* height: 100%; */
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
    }

    .flip-card-back {
      transform: rotateY(180deg) rotate(30deg);

    }

    .flip-container {
      /*perspective*/
      -webkit-perspective: 1000;
      -moz-perspective: 1000;
      -ms-perspective: 1000;
      -o-perspective: 1000;
      perspective: 1000;
    }

    /* flip the pane when hovered */
    .flipped {
      /*transform*/
      -webkit-transform: rotateY(180deg);
      -moz-transform: rotateY(180deg);
      -ms-transform: rotateY(180deg);
      -o-transform: rotateY(180deg);
      transform: rotateY(180deg);
    }

    .flip-container,
    .front,
    .back {
      width: 50px;
      height: 50px;
    }



    /* hide back of pane during swap */
    .front,
    .back {
      /*backface-visibility*/
      -webkit-backface-visibility: hidden;
      -moz-backface-visibility: hidden;
      -ms-backface-visibility: hidden;
      -o-backface-visibility: hidden;
      backface-visibility: hidden;
      position: absolute;
      top: 0;
      left: 0;
    }

    /* front pane, placed above back */
    .front {
      z-index: 2;
    }

    /* back, initially hidden pane */
    .back {
      /*transform*/
      -webkit-transform: rotateY(180deg);
      -moz-transform: rotateY(180deg);
      -ms-transform: rotateY(180deg);
      -o-transform: rotateY(180deg);
      transform: rotateY(180deg);
    }


    h1,
    h2,
    h3,
    h4,
    h5,
    body {
      font-family: 'Montserrat', 'Noto Sans KR';
    }

    .kr-font {
      font-family: 'Noto Sans KR';
    }

    .en-font {
      font-family: 'Montserrat';
    }

    .bd-placeholder-img {
      font-size: 1.125rem;
      text-anchor: middle;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }

    @media (min-width: 768px) {
      .bd-placeholder-img-lg {
        font-size: 3.5rem;
      }
    }

    canvas {
      height: 100vh;
      width: 100vw;
      display: block;
    }


    .scroll-container {
      /* height: 100vh; */
      /* background: black; */
    }

    .speak {
      margin: 150vh 0;

      &:first-child {
        margin-top: -50vh;
      }
    }

    .speak[data-scroll] {
      // transition: opacity .3s;
      transform: translatey(calc(var(--viewport-y) * 30vh));
      opacity: calc(var(--visible-y));

    }

    .scroll-sequence__content {
      padding: 4em;
    }

    .scroll-sequence {
      position: sticky;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      z-index: -5;
      height: 100vh;
      background-position: center;
      background-size: cover;
      background-repeat: no-repeat;
    }

    /*  */

    ::-webkit-scrollbar {
      width: 2px;
      height: 2px;
    }

    ::-webkit-scrollbar-button {
      width: 2px;
      height: 2px;
    }

    div {
      box-sizing: border-box;
    }

    body {
      background: #111;
    }

    .horizontal-scroll-wrapper {
 
      display: block;
 
      /* width: 2000px; */
      /* height: 100vw; */
      max-height:100vw;
      margin: 0;
      overflow-y: auto;
      overflow-x: hidden;
      transform: rotate(-90deg) translateY(-100%);
      transform-origin: right top;
    }

    .horizontal-scroll-wrapper>img {
      height:50%;
      transform: rotate(90deg);
     
    }

   
    #s3-back {
      background-image: url("images/s2/S2.png");
      background-repeat: no-repeat;
    background-size: 100% 100%;
    }
  </style>
  <!-- Custom styles for this template -->
</head>

<body class="d-flex flex-column h-100">

  <div class="container-fluid">

    <div class="row" data-aos="zoom-out" id="s1" style="background-color:#E80000; height:110vh">

      <div class="col-4" style=" margin-left: 2%;  margin-top: 4%;">
        <h1 class="text-white" id="s1_title" style='font-size: 3rem; opacity:70%;'>LET’S START DIGGING‍<span><img
              src="images/s1/emoji.png"></span> </h1>
        <div style="margin-top:80%">

          <a onclick="bg_change($(this).attr('id'))" class="ui circular label s1_clicked" id="red"
            style="background-color: #E80000;"></a>
          <a onclick="bg_change($(this).attr('id'))" id="orange" class="ui circular label"
            style="background-color: #F27809;"></a>
          <a onclick="bg_change($(this).attr('id'))" id="yellow" class="ui circular label"
            style="background-color: #FFBA22;"></a>
          <a onclick="bg_change($(this).attr('id'))" id="green" class="ui circular label"
            style="background-color: #009845;"></a>
          <a onclick="bg_change($(this).attr('id'))" id="mint" class="ui circular label"
            style="background-color: #00BFA8;"></a>
          <a onclick="bg_change($(this).attr('id'))" id="sky" class="ui circular label"
            style="background-color: #009DFF;"></a>
          <a onclick="bg_change($(this).attr('id'))" id="blue" class="ui circular label"
            style="background-color: #364DEB;"></a>
          <a onclick="bg_change($(this).attr('id'))" id="purple" class="ui circular label"
            style="background-color: #7119F2;"></a>
          <a onclick="bg_change($(this).attr('id'))" id="pink" class="ui circular label"
            style="background-color: #FF0080;"></a>
        </div>
      </div>
      <div class="col-5 offset-1" style="margin-top: 8%;">
        <div class="flip-card" style="cursor: pointer;">
          <div class="flip-card-inner" onclick="this.classList.toggle('flipped')">
            <div class="flip-card-front">
              <img class="d-card" id="s1_card" src="images/s1/red/red_card_back.png" alt="digging card"
                style="width:100%">
            </div>
            <div class="flip-card-back">
              <img class="d-card" id="s1_card_front" src="images/s1/red/red_card_front.png" alt="digging contents"
                style="width:100%">
              <div class="overlay">
                <img class="d-card" id="s1_card_caption" src="images/s1/red/red_caption.png" alt="digging caption"
                  style="width:100%">
              </div>
            </div>
          </div>
        </div>
        <p id="s1_text" class="text-white"
          style="margin-top:-25%; text-align: center;font-size: 1.5rem;width: 59%;transform: rotate(-60deg);padding-left: 71%;">
          STYLE/BEAUTY</p>
      </div>
      <div class="col" style="align-self: flex-end">
        <img class="float-right mr-5 mb-5" src="images/s1/mouse.png" style="width:10%">
      </div>
    </div>
    <p id="s1_color" style="display:none;">
    </p>
    <div data-aos="zoom-in-up" class="row">
      <img id="s1_image" class="s1_image d-none" src="images/s1/red/red_image.png" style="width:100%;">

      <figure class="m-0 p-0" style="width:100%"><video muted src="images/s1/pink/pink_video.mp4" id="s1_video"
          class="s1_video d-none" autoplay="autoplay" loop="loop" style="width:100%;"></video></figure>
      <video src="images/s1/purple/purple_audio.mp4" id="s1_audio" class="s1_audio d-none" autoplay="autoplay"
        loop="loop" style="width:100%;"></video>


      <h1 class="display-1 text-uppercase text-white text-center overlay" id="s1-digging-text"
        style="top:50%; opacity: 22%; font-weight: 700; font-size:13rem;">DIGGING</h1>
    </div>

    <div class="row" id="s3-back" class="s3_back">


      <div class="col-3" data-aos="slide-up">
        <p class="text-white">Dig out your favorite informations</p>
        <span class="text-white">유용한 정보를 발굴하고, 저장하며</span>
      </div>
     
      <div data-aos="zoom-in" class="offset-4 col-3" style="margin-top: 40%;">
        <span class="text-white">and become a digging influencer!</span>
        <span class="kr-font text-white">정보력 넘치는 디깅 인플루언서가 되어보세요!</span>
      </div>

    </div>


    <!-- <div class="row container-img" >
      <img src="images/s3/S3-gradient-background.png" data-aos="zoom-in" class="image" style="width:110%;">

      <div class="overlay" style="text-align:center;">

          <div class="col-3">
            <p class="text-white" data-aos="slide-up">Dig out your favorite informations</p>
            <span class="text-white">유용한 정보를 발굴하고, 저장하며</span>
          </div>
          <div class="col" style="margin-top: 14%;">
            <img src="images/s2/S2.png" width="56%" data-aos="zoom-in" >
          </div>

          <div data-aos="zoom-in" class="col-3" style="margin-top: 40%;">
            <span class="text-white">and become a digging influencer!</span>
            <span class="kr-font text-white">정보력 넘치는 디깅 인플루언서가 되어보세요!</span>
          </div>
     
      </div>
    </div> -->


    <div class="row" data-aos="zoom-in">

      <video autoplay muted loop width="100%">
        <!-- <video autoplay muted loop width = "100%"> -->
        <source src="images/s3/S3.mp4" type="video/mp4">
      </video>

    </div>
    <!-- </div> -->
    <div class="row">

    </div>




    <div class="row">
      <div class="horizontal-scroll-wrapper squares">
        <img src = "images/s4/s4_1.png">
        <img src = "images/s4/s4_2.png">
        <img src = "images/s4/s4_3.png">
        <img src = "images/s4/s4_4.png">
      </div>
    </div>


      <section class="scroll-sequence__container apple-container">
        <div class="scroll-sequence apple-sequence"></div>
        <div class="scroll-sequence__content">
          <div class="speak">
            <h1>Any information you dig</h1>
            <p>내가 디깅하는 수많은 정보들은</p>
          </div>
          <div class="speak">
            <h1>This is Apple's image sequence</h1>
            <p>All copyrights to them. Please don't sue me!</p>
          </div>
          <div class="speak">
            <h1>The Text Animation</h1>
            <p>Is created with Scroll-out.js. Go check it out!</p>
          </div>
        </div>
      </section>

      <div class="row" data-aos="zoom-in">
        <img data-aos="slide-up" src="images/s6/s6_rose_card.png" width="100%">
        <video autoplay muted loop id="myVideo" width="100%">
          <source src="images/s6/rose_player.mp4" type="video/mp4">
        </video>
      </div>

      <section class="scroll-sequence__container s7-container">
        <div class="scroll-sequence s7-sequence"></div>
        <div class="scroll-sequence__content">
          <div class="speak">
            <h1>This took me a while</h1>
            <p>To get right, but here it is!</p>
          </div>
          <div class="speak">
            <h1>Apple's images load faster</h1>
            <p>Compression favors less details. So, shots of the forest was not the best idea :P</p>
          </div>
          <div class="speak">
            <h1>Running out of things</h1>
            <p>To say so imma head out.</p>
          </div>
        </div>
      </section>

      <div class="row" class="s10">
        <video autoplay muted loop width="100%">
          <source src="images/s10/s9_video.mp4" type="video/mp4">
        </video>

    
      </div>
      <div class = "row" class = "s10">
      <section class="scroll-sequence__container s9-container">
        <div class="scroll-sequence s9-sequence"></div>
        <div class="scroll-sequence__content">
          <div class="speak">
            <h1></h1>
            <p></p>
          </div>
          <div class="speak">
            <h1></h1>
            <p></p>
          </div>
          <div class="speak">
            <h1></h1>
            <p></p>           
          </div>
        </div>
      </section>
    </div>

      <div class="row">
        <video autoplay muted loop width="100%">
          <source src="images/s11/s11.mp4" type="video/mp4">
        </video>
      </div>
      <div class="row">
        <section class="scroll-sequence__container s12-container">
          <div class="scroll-sequence s12-sequence"></div>
          <div class="scroll-sequence__content">
            <div class="speak">
              <h1></h1>
              <p></p>
            </div>
            <div class="speak">
              <h1></h1>
              <p></p>
            </div>
            <div class="speak">
              <h1></h1>
              <p></p>           
            </div>
          </div>
            
         
        </section>
        <video autoplay muted loop width="100%">
          <source src="images/s12/S12_main.mp4" type="video/mp4">
        </video>
        <video autoplay muted loop width="100%">
          <source src="images/s12/S12_main2.mp4" type="video/mp4">
        </video>
        <video autoplay muted loop width="100%">
          <source src="images/s12/S12_main3.mp4" type="video/mp4">
        </video>
        <video autoplay muted loop width="100%">
          <source src="images/s12/S12_win.mp4" type="video/mp4">
        </video>
      </div>






    </div>
  </div>
  <script>


    const appleSequenceImages = [];
    const s7 = [];
    const s9Images = [];
    const s12Images = [];
  
    for (let i = 0; i <= 580; i++) {
      appleSequenceImages.push(`s5_${`${i}`.slice(-6)}.png`);
      // s7.push(`${`${i}`.slice(-3)}.png`);
    }
      
    for (let i = 0; i <= 42; i++) {
      s7.push(`s7_${`${i}`.slice(-6)}.png`);
    }

    for (let i = 0; i <= 910; i++) {
      s9Images.push(`s9_${`${i}`.slice(-6)}.png`);
    }

    for (let i = 0; i <= 540; i++) {
      s12Images.push(`s12_intro_${`${i}`.slice(-6)}.png`);
    }


    // console.log(appleSequenceImages);

    const requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

    class EventEmitter {
      listeners = {}
      addListener(eventName, fn) {
        this.listeners[eventName] = this.listeners[eventName] || [];
        this.listeners[eventName].push(fn);
        return this;
      }
      on(eventName, fn) {
        return this.addListener(eventName, fn);
      }
      once(eventName, fn) {
        this.listeners[eventName] = this.listeners[eventName] || [];
        const onceWrapper = () => {
          fn();
          this.off(eventName, onceWrapper);
        }
        this.listeners[eventName].push(onceWrapper);
        return this;
      }
      off(eventName, fn) {
        return this.removeListener(eventName, fn);
      }
      removeListener(eventName, fn) {
        let lis = this.listeners[eventName];
        if (!lis) return this;
        for (let i = lis.length; i > 0; i--) {
          if (lis[i] === fn) {
            lis.splice(i, 1);
            break;
          }
        }
        return this;
      }
      emit(eventName, ...args) {
        let fns = this.listeners[eventName];
        if (!fns) return false;
        fns.forEach((f) => {
          f(...args);
        });
        return true;
      }
      listenerCount(eventName) {
        let fns = this.listeners[eventName] || [];
        return fns.length;
      }
      rawListeners(eventName) {
        return this.listeners[eventName];
      }
    }
    class Canvas {
      constructor(e) {
        this.images = e.images;
        this.container = e.container;
        this.cover = e.cover;
        this.displayIndex = 0;
      }

      setup() {
        this.canvas = document.createElement("canvas");
        this.container.appendChild(this.canvas);
        this.ctx = this.canvas.getContext('2d')

        window.addEventListener('resize', () => this.resize());
        this.resize();
      }

      renderIndex(e) {
        if (this.images[e]) {
          return this.drawImage(e);
        }
        // Find closest loaded image
        for (var t = Number.MAX_SAFE_INTEGER, r = e; r >= 0; r--)
          if (this.images[r]) {
            t = r;
            break
          }
        for (var n = Number.MAX_SAFE_INTEGER, i = e, o = this.images.length; i < o; i++)
          if (this.images[i]) {
            n = i;
            break
          }
        this.images[t] ? this.drawImage(t) : this.images[n] && this.drawImage(n)
      }

      drawImage(e) {
        this.displayIndex = e,
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        const x = Math.floor((this.canvas.width - this.images[this.displayIndex].naturalWidth) / 2);
        const y = Math.floor((this.canvas.height - this.images[this.displayIndex].naturalHeight) / 2);
        if (this.cover) {

          this.drawImageCover(this.ctx, this.images[this.displayIndex]);
        } else {
          this.ctx.drawImage(this.images[this.displayIndex], x, y);
        }
      }

      resize() {
        const w = this.container.clientWidth;
        const h = this.container.clientHeight;
        this.canvas.style.height = `${h}px`;
        this.canvas.style.width = `${w}px`;
        this.canvas.height = h;
        this.canvas.width = w;

        this.renderIndex(this.displayIndex);
      }

      /**
     * By Ken Fyrstenberg Nilsen
     *
     * drawImageProp(context, image [, x, y, width, height [,offsetX, offsetY]])
     *
     * If image and context are only arguments rectangle will equal canvas
    */
      drawImageCover(ctx, img, x, y, w, h, offsetX, offsetY) {

        if (arguments.length === 2) {
          x = y = 0;
          w = ctx.canvas.width;
          h = ctx.canvas.height;
        }

        // default offset is center
        offsetX = typeof offsetX === "number" ? offsetX : 0.5;
        offsetY = typeof offsetY === "number" ? offsetY : 0.5;

        // keep bounds [0.0, 1.0]
        if (offsetX < 0) offsetX = 0;
        if (offsetY < 0) offsetY = 0;
        if (offsetX > 1) offsetX = 1;
        if (offsetY > 1) offsetY = 1;

        var iw = img.width,
          ih = img.height,
          r = Math.min(w / iw, h / ih),
          nw = iw * r,   // new prop. width
          nh = ih * r,   // new prop. height
          cx, cy, cw, ch, ar = 1;

        // decide which gap to fill    
        if (nw < w) ar = w / nw;
        if (Math.abs(ar - 1) < 1e-14 && nh < h) ar = h / nh;  // updated
        nw *= ar;
        nh *= ar;

        // calc source rectangle
        cw = iw / (nw / w);
        ch = ih / (nh / h);

        cx = (iw - cw) * offsetX;
        cy = (ih - ch) * offsetY;

        // make sure source rectangle is valid
        if (cx < 0) cx = 0;
        if (cy < 0) cy = 0;
        if (cw > iw) cw = iw;
        if (ch > ih) ch = ih;

        // fill image in dest. rectangle
        ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);
      }
    }
    class ImgLoader extends EventEmitter {
      constructor(opts) {
        super();
        this.images = opts.imgsRef;
        this.imageNames = opts.images;
        this.imagesRoot = opts.imagesRoot;
        this.sequenceLength = opts.images.length;
        this.priorityFranes = opts.priorityFrames;
        this.complete = false;
        this.loadIndex = 0;

        this.priorityQueue = this.createPriorityQueue();
        this.loadingQueue = this.createLoadingQueue();

        this.loadNextImage();
      }

      loadImage(e) {
        if (this.images[e]) {
          return this.loadNextImage();
        }
        const onLoad = () => {
          img.removeEventListener('load', onLoad);
          this.images[e] = img;

          if (e === 0) {
            this.emit('FIRST_IMAGE_LOADED');
          }
          this.loadNextImage();
        }
        const img = new Image;
        img.addEventListener('load', onLoad);
        img.src = (this.imagesRoot ? this.imagesRoot : '') + this.imageNames[e];
      }

      loadNextImage() {
        if (this.priorityQueue.length) {
          this.loadImage(this.priorityQueue.shift());
          if (!this.priorityQueue.length) {
            this.emit('PRIORITY_IMAGES_LOADED');
          }
        } else if (this.loadingQueue.length) {
          this.loadImage(this.loadingQueue.shift())
        } else {
          this.complete = true;
          this.emit('IMAGES_LOADED');
        }
      }

      createPriorityQueue() {
        const p = this.priorityFrames || [];
        if (!p.length) {
          p.push(0);
          p.push(Math.round(this.sequenceLength / 2));
          p.push(this.sequenceLength - 1);
        }
        return p;
      }

      createLoadingQueue() {
        return this.imageNames.map((s, i) => i).sort((e, n) => {
          return Math.abs(e - this.sequenceLength / 2) - Math.abs(n - this.sequenceLength / 2)
        });
      }
    }
    class ScrollSequence {
      constructor(opts) {
        this.opts = {
          container: 'body',
          starts: 'out',
          ends: 'out',
          imagesRoot: '',
          cover: false,
          ...opts
        }
        this.container = typeof opts.container === 'object' ?
          opts.container :
          document.querySelector(opts.container);

        this.scrollWith = !opts.scrollWith ?
          this.container :
          typeof opts.scrollWith === 'object' ?
            opts.scrollWith :
            document.querySelector(opts.scrollWith);

        this.images = Array(opts.images.length);
        this.imagesToLoad = opts.images;
        this.priorityFrames = opts.priorityFrames;

        this.loader = new ImgLoader({
          imgsRef: this.images,
          images: this.imagesToLoad,
          imagesRoot: this.opts.imagesRoot,
          priorityFrames: this.priorityFrames
        });

        this.canvas = new Canvas({
          container: this.container,
          images: this.images,
          cover: this.opts.cover
        });

        this.init();
      }

      init() {
        this.canvas.setup();
        this.loader.once('FIRST_IMAGE_LOADED', () => {
          this.canvas.renderIndex(0);
        })
        this.loader.once('PRIORITY_IMAGES_LOADED', () => {
          window.addEventListener('scroll', () => this.changeOnWindowScroll());
        })
        this.loader.once('IMAGES_LOADED', () => {
          console.log('Sequence Loaded');
        })
      }

      changeOnWindowScroll() {
        const step = 100 / (this.images.length - 1);
        const mapToIndex = Math.floor(this.percentScrolled / step);
        requestAnimationFrame(() => this.canvas.renderIndex(mapToIndex));
      }

      get percentScrolled() {
        const { starts, ends } = this.opts;
        const el = this.scrollWith;
        const doc = document.documentElement;
        const clientOffsety = doc.scrollTop || window.pageYOffset;
        const elementHeight = el.clientHeight || el.offsetHeight;
        const clientHeight = doc.clientHeight;
        let target = el;
        let offsetY = 0;
        do {
          offsetY += target.offsetTop;
          target = target.offsetParent;
        } while (target && target !== window);

        let u = (clientOffsety - offsetY);
        let d = (elementHeight + clientHeight)

        if (starts === 'out') u += clientHeight;
        if (ends === 'in') d -= clientHeight;
        if (starts == 'in') d -= clientHeight;
        // start: out, ends: out
        // const value = ((clientOffsety + clientHeight) - offsetY) / (clientHeight + elementHeight) * 100;

        //start: in, ends: out
        // const value = (clientOffsety - offsetY) / (elementHeight) * 100;

        //start: out, ends: in
        // const value = ((clientOffsety + clientHeight) - offsetY) / (elementHeight) * 100;

        // Start: in, ends: in
        // (clientOffsety - offsetY) / (elementHeight - clientHeight)

        const value = u / d * 100;
        return value > 100 ? 100 : value < 0 ? 0 : value;
      }
    }

    const appleSequence = new ScrollSequence({
      container: '.apple-sequence',
      scrollWith: '.apple-container',
      images: appleSequenceImages,
      imagesRoot: 'images/s5/',
      priorityFrames: [0, 20, 40, 60, 90],
      cover: true,
      playUntil: 'scroll-out',
      starts: 'in'
    });

    const s7Sequence = new ScrollSequence({
      container: '.s7-sequence',
      scrollWith: '.s7-container',
      images: s7,
      imagesRoot: 'images/s7/',
      priorityFrames: [0, 20, 40, 60, 90],
      cover: true,
      starts: 'out',
      ends: 'in'
    });

    const s9Sequence = new ScrollSequence({
      container: '.s9-sequence',
      scrollWith: '.s9-container',
      images: s9Images,
      imagesRoot: 'images/s10/s9_png/',
      priorityFrames: [0, 20, 40, 60, 90],
      cover: true,
      starts: 'out',
      ends: 'in'
    });

    const s12Sequence = new ScrollSequence({
      container: '.s12-sequence',
      scrollWith: '.s12-container',
      images: s12Images,
      imagesRoot: 'images/s12/s12_intro/',
      priorityFrames: [0, 20, 40, 60, 90],
      cover: true,
      starts: 'out',
      ends: 'in'
    });
    // END SCROLL_SEQUENCE CODE

    // ScrollOut({
    //   targets: '.speak',
    //   cssProps: {
    //     viewportY: true,
    //     visibleY: true
    //   }
    // });





    AOS.init({
      duration: 1200,
    })

    // AOS.init();



    function bg_change(color) {

      $(".ui.circular.label").removeClass("s1_clicked");
      document.getElementById(color).classList.add("s1_clicked");

      document.getElementById("s1_card").src = "images/s1/" + color + "/" + color + "_card_back.png";
      document.getElementById("s1_card_front").src = "images/s1/" + color + "/" + color + "_card_front.png";
      document.getElementById("s1_card_caption").src = "images/s1/" + color + "/" + color + "_caption.png";
      document.getElementById("s1_color").textContent = color;


      document.getElementById("s1").style.backgroundColor = document.getElementById(color).style.backgroundColor;
      // $("s3-back").removeClass("d-none");
      if (color == "mint" || color == "pink" || color == "sky" || color == "purple") {
        $(".s1_video").removeClass("d-none");
        $(".s1_image").addClass("d-none");
        if (color == "purple") {
          $(".s1_audio").removeClass("d-none");
          $(".s1_video").addClass("d-none");
        } else {
          document.getElementById("s1_video").src = "images/s1/" + color + "/" + color + "_video.mp4";
          $(".s1_audio").addClass("d-none");
        }

      } else {

        $(".s1_image").removeClass("d-none");
        $(".s1_video").addClass("d-none");
        document.getElementById("s1_image").src = "images/s1/" + color + "/" + color + "_image.png";
      }

      switch (color) {
        case 'red':
          document.getElementById("s1_text").textContent = "STYLE/BEAUTY";
          break;
        case 'orange':
          document.getElementById("s1_text").textContent = "PLACE";
          break;
        case 'yellow':
          document.getElementById("s1_text").textContent = "LIVING";
          break;
        case 'green':
          document.getElementById("s1_text").textContent = "PET";
          break;
        case 'mint':
          document.getElementById("s1_text").textContent = "SCUBA DIVING";

          break;
        case 'sky':
          document.getElementById("s1_text").textContent = "HOBBY";
          break;
        case 'blue':
          document.getElementById("s1_text").textContent = "KNOWLEDGE/IT";

          break;
        case 'purple':
          document.getElementById("s1_text").textContent = "ENTERTAINMENT";

          break;
        case 'pink':    
          document.getElementById("s1_text").textContent = "PEOPLE";

          break;

        default:
          document.getElementById("s1").style.backgroundColor = "#E80000";
          break;
      }
    }



    $(window).scroll(function () {
      var scroll = $(window).scrollTop() / 10;
      // console.log(scroll);

      $("#s1-digging-text").css({
        "opacity": (-33 + 1 * scroll) + "%"
      })


      var rotationStr = "rotate(" + -0.5 * scroll + "deg)";
      if (scroll <= 60) {
        $(".d-card").css({
          "-webkit-transform": rotationStr,
          "-moz-transform": rotationStr,
          "transform": rotationStr,
          "opacity": rotationStr,
          "width": (100 + 4 * scroll) + "%"
        });
        $("#s1_card_caption").css({
          "opacity": 1 - 0.033 * scroll
        });
        $("#s1_text").css({
          "padding-left": (62 + 5 * scroll) + "%"
        });
        $("#s1_title").css({
          "margin-left": (0 - 8 * scroll) + "%"
        });

      } else if (scroll < 65) {
        $("#s1_card_front").css({ "width": (100 + scroll) + "%" })
      } else {
        //안먹음
        $(".d-card").css({
          "width": (100 - 4 * scroll) + "%"
        });

      }

    });



  </script>


  <script src="https://cdnjs.cloudflare.com/ajax/libs/prefixfree/1.0.7/prefixfree.min.js"></script>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
    integrity="sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=" crossorigin="anonymous"></script>
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
    integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
    integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
    crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
    integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV"
    crossorigin="anonymous"></script>
  </script>
</body>

</html>
